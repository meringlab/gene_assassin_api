#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('ga-domains-api');
const http = require('http');

const URL = process.env.MONGODB_URL || 'mongodb://localhost:27017';
const RS = process.env.MONGODB_RSET || '';

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

var server = http.createServer(app);

var boot = function (mongodbUrl) {
    app.set('mongodb_url', mongodbUrl);
    app.set('mongodb_rs', RS);
    /**
     * Listen on provided port, on all network interfaces.
     */
    server.listen(port, function () {
        console.info('Express server listening on port ' + app.get('port'));
    });
    server.on('error', onError);
    server.on('listening', onListening);
}

if (require.main === module) {
    //TODO use service discovery
    //var consul = backend.consul({consul_host: process.env.CONSUL_HOST});
    //consul.serviceDescription('ga-domains-mongodb', function (description) {
    //    const url = 'http://' + description[0].ServiceAddress + ':' + description[0].ServicePort
    //    //
    //    boot(storage);
    //});
    boot(URL);
} else {
    console.info('Running app as a module')
    exports.boot = boot;
    exports.shutdown = function () {
        server.close();
    };
    exports.port = app.get('port');
}

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
